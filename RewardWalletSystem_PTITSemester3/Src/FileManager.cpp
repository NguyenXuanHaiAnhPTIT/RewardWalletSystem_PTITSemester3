#include "../include/FileManager.h"
#include <fstream>
#include <iostream>
#include <filesystem>


namespace fs = std::filesystem;

FileManager::FileManager() {}

void FileManager::createFolderIfNotExists(const std::string& path) {
    if (!fs::exists(path)) {
        fs::create_directories(path);
    }
}

// ======================== USER =============================
bool FileManager::saveUser(const UserAccount& user) {
    createFolderIfNotExists("Data/User");
    std::string filename = "Data/User/" + user.username + ".dat";
    std::ofstream fout(filename);
    if (!fout) return false;
    fout << user.username << std::endl;
    fout << user.hashedPassword << std::endl;
    fout << user.fullName << std::endl;
    fout << user.email << std::endl;
    fout << user.phone << std::endl;
    fout << user.isAdmin << std::endl;
    fout << user.isLocked << std::endl;
    fout << user.isPasswordAutoGenerated << std::endl;
    fout.close();
    return true;
}

bool FileManager::loadUser(const std::string& username, UserAccount& user) {
    std::string filename = "Data/User/" + username + ".dat";
    std::ifstream fin(filename);
    if (!fin) return false;
    std::getline(fin, user.username);
    std::getline(fin, user.hashedPassword);
    std::getline(fin, user.fullName);
    std::getline(fin, user.email);
    std::getline(fin, user.phone);
    fin >> user.isAdmin;
    fin >> user.isLocked;
    fin >> user.isPasswordAutoGenerated;
    fin.close();
    return true;
}

std::vector<UserAccount> FileManager::loadAllUsers() {
    std::vector<UserAccount> users;
    createFolderIfNotExists("Data/User");
    for (const auto& entry : fs::directory_iterator("Data/User")) {
        if (entry.is_regular_file()) {
            UserAccount user;
            std::string filename = entry.path().stem().string();
            if (filename.find("_wallet") != std::string::npos) continue;  // Bỏ file ví
            if (loadUser(filename, user)) {
                users.push_back(user);
            }
        }
    }
    return users;
}

// ======================== WALLET =============================
bool FileManager::saveWallet(const Wallet& wallet) {
    createFolderIfNotExists("Data/User");
    std::string filename = "Data/User/" + wallet.owner + "_wallet.dat";
    std::ofstream fout(filename);
    if (!fout) return false;
    fout << wallet.walletID << std::endl;
    fout << wallet.owner << std::endl;
    fout << wallet.balance << std::endl;
    fout.close();
    return true;
}

bool FileManager::loadWallet(const std::string& username, Wallet& wallet) {
    std::string filename = "Data/User/" + username + "_wallet.dat";
    std::ifstream fin(filename);
    if (!fin) return false;
    std::getline(fin, wallet.walletID);
    std::getline(fin, wallet.owner);
    fin >> wallet.balance;
    fin.close();
    return true;
}

// ======================== TRANSACTION =============================
bool FileManager::saveTransaction(const Transaction& t) {
    createFolderIfNotExists("Data/transaction_log");
    std::ofstream fout("Data/transaction_log/transaction_log.txt", std::ios::app);
    if (!fout) return false;
    fout << t.transactionID << "," << t.fromUser << "," << t.toUser << ","
        << t.amount << "," << t.timeStamp << "," << t.status << "," << t.note << std::endl;
    fout.close();
    return true;
}

std::vector<Transaction> FileManager::loadAllTransactions() {
    std::vector<Transaction> txs;
    createFolderIfNotExists("Data/transaction_log");
    std::ifstream fin("Data/transaction_log/transaction_log.txt");
    if (!fin) return txs;
    std::string line;
    while (std::getline(fin, line)) {
        Transaction t;
        size_t pos = 0, prev = 0;
        std::vector<std::string> tokens;
        while ((pos = line.find(',', prev)) != std::string::npos) {
            tokens.push_back(line.substr(prev, pos - prev));
            prev = pos + 1;
        }
        tokens.push_back(line.substr(prev));
        if (tokens.size() >= 7) {
            t.transactionID = tokens[0];
            t.fromUser = tokens[1];
            t.toUser = tokens[2];
            t.amount = std::stoll(tokens[3]);
            t.timeStamp = tokens[4];
            t.status = tokens[5];
            t.note = tokens[6];
            txs.push_back(t);
        }
    }
    fin.close();
    return txs;
}

// ======================== BACKUP/RESTORE =============================
bool FileManager::backupData() {
    createFolderIfNotExists("Data/backup");
    try {
        fs::remove_all("Data/backup/User");
        fs::remove_all("Data/backup/transaction_log");

        if (fs::exists("Data/User"))
            fs::copy("Data/User", "Data/backup/User", fs::copy_options::recursive);
        if (fs::exists("Data/transaction_log"))
            fs::copy("Data/transaction_log", "Data/backup/transaction_log", fs::copy_options::recursive);

        return true;
    }
    catch (...) {
        return false;
    }
}


bool FileManager::restoreBackup() {
    try {
        if (fs::exists("Data/backup/User")) {
            fs::remove_all("Data/User");
            fs::copy("Data/backup/User", "Data/User", fs::copy_options::recursive);
        }
        if (fs::exists("Data/backup/transaction_log")) {
            fs::remove_all("Data/transaction_log");
            fs::copy("Data/backup/transaction_log", "Data/transaction_log", fs::copy_options::recursive);
        }
        return true;
    }
    catch (...) {
        return false;
    }
}
